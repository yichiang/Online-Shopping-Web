@using OnlineShoppingWeb.ViewModels;
@using OnlineShoppingWeb.Enities;
@model ProductPageViewModel
@if(Model.IsSearchAreaVisible)
{
    @using (Html.BeginForm("Index", "Product", FormMethod.Post, new { @class = "SearchForm" }))
    {
        @Html.ValidationSummary()
        @Html.HiddenFor(model => model.EventCommand)
        <div class="panel panel-default">
            <div class="panel-heading">Product</div>
            <div class="panel-body">

                <div class="form-group">
                    @Html.LabelFor(model => model.ProductSearchName)
                    @Html.TextBoxFor(model => model.ProductSearchName, new { @class = "form-control" })
                </div>
            </div>
            <div class="panel-footer">
                <button class="btn own-btn-action" value="search"> <span class="glyphicon glyphicon-search" aria-hidden="true"></span>Search</button>
                <button class="btn own-btn-action" value="list"> <span class="glyphicon glyphicon-repeat" aria-hidden="true"></span>Reset</button>
                <button class="btn own-btn-action" value="addPhone"> <span class="glyphicon glyphicon-plus" aria-hidden="true"></span>Add New Phone</button>
                <button class="btn own-btn-action" value="addLaptop"> <span class="glyphicon glyphicon-plus" aria-hidden="true"></span>Add New Laptop</button>

            </div>
        </div>

    }
}

@if (Model.IsListAreaVisible)
{
    <h1>Product Manage Tool -Admin</h1>

    <div class="table-responsive">

        <table class="table">
            <tr>
                <th>Title</th>
                <th>Price</th>
                <th>SubDepartment</th>
                <th>Condition</th>
                <th>Rating</th>
                <th>Quantity</th>
                <th>Edit</th>
                <th>Delete</th>

            </tr>
            @foreach (var product in Model.Products)
            {
                <tr>
                    @if (@product.Title.Length > 60)
                    {
                        <th>@product.Title.Substring(0, 59) ...</th>
                    }
                    else
                    {
                        <th>@product.Title</th>

                    }
                    <th>$ @product.Price</th>
                    <th>@product.Discriminator</th>
                    <th>@product.Condition</th>

                    <th>@Html.Partial("_StarReview", product.AvgCustomerReview)</th>
                    <th>
                    
                        <button><span class="glyphicon glyphicon-minus" aria-hidden="true"></span></button>
                        @product.Quantity 
                        <button><span class="glyphicon glyphicon-plus" aria-hidden="true"></span></button>
                    
                    </th>

                    <th>
                            <button class="btn own-btn-action" value=@string.Format("edit{0}/{1}", product.Discriminator,product.ProductId)> <span class="glyphicon glyphicon-pencil" aria-hidden="true"></span>Edit</button>
                    </th>
                    <th>
                            <input type="submit" value="Delete" />
                    </th>
                </tr>
            }

        </table>
    </div>

}


@if (Model.IsAddPhoneFormAreaVisible)
{
    @using (Html.BeginForm("Index", "Product", FormMethod.Post, new { @class = "SearchForm" }))
    {
    <button class="btn own-btn-action" value="list"> <span class="glyphicon glyphicon-repeat" aria-hidden="true"></span>Reset</button>
    }
    <h2> Add New Form </h2>
    @using (Html.BeginForm("CreatePhone", "Product", FormMethod.Post))
    {
        @Html.ValidationSummary()

        <div class="form-group">
            @Html.LabelFor(model => model.Phone.Title)
            @Html.TextBoxFor(model => model.Phone.Title, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Phone.Title)
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Phone.Price)
            @Html.TextBoxFor(model => model.Phone.Price, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Phone.Price)
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Phone.Brand)
            @Html.TextBoxFor(model => model.Phone.Brand, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Phone.Brand)
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.Phone.AvgCustomerReview)
            @Html.TextBoxFor(model => model.Phone.AvgCustomerReview, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Phone.AvgCustomerReview)
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Phone.Carrier)
            @Html.TextBoxFor(model => model.Phone.Carrier, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Phone.Carrier)
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Phone.Quantity)
            @Html.TextBoxFor(model => model.Phone.Quantity, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Phone.Quantity)
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Phone.Condition)
            @Html.DropDownListFor(model => model.Phone.Condition, Html.GetEnumSelectList(typeof(ConditionType)))
            @Html.ValidationMessageFor(model => model.Phone.Condition)
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.Phone.SubDepartment)
            @Html.DropDownListFor(model => model.Phone.SubDepartmentId, Model.SubDepartments.Select(x => new SelectListItem { Text = x.SubDepartmentId.ToString() + x.Description, Value = x.SubDepartmentId.ToString() }))
            @Html.ValidationMessageFor(model => model.Phone.SubDepartment)
        </div>

        <div class="form-group">
            <input type="submit" value="Add New Phone" />
        </div>
    }
}

@if (Model.IsEditPhoneFormAreaVisible)
{

    <h2> Edit Phone</h2>
    @using (Html.BeginForm("EditPhone", "Product", FormMethod.Post, new { ProductId = Model.Phone.ProductId }))
    {
        @Html.ValidationSummary()

        <div class="form-group">
            @Html.LabelFor(model => model.Phone.Title)
            @Html.TextBoxFor(model => model.Phone.Title, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Phone.Title)
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Phone.Price)
            @Html.TextBoxFor(model => model.Phone.Price, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Phone.Price)
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Phone.Brand)
            @Html.TextBoxFor(model => model.Phone.Brand, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Phone.Brand)
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.Phone.AvgCustomerReview)
            @Html.TextBoxFor(model => model.Phone.AvgCustomerReview, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Phone.AvgCustomerReview)
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Phone.Carrier)
            @Html.TextBoxFor(model => model.Phone.Carrier, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Phone.Carrier)
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Phone.Quantity)
            @Html.TextBoxFor(model => model.Phone.Quantity, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Phone.Quantity)
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Phone.Condition)
            @Html.DropDownListFor(model => model.Phone.Condition, Html.GetEnumSelectList(typeof(ConditionType)))
            @Html.ValidationMessageFor(model => model.Phone.Condition)
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.Phone.SubDepartment)
            @Html.DropDownListFor(model => model.Phone.SubDepartmentId, Model.SubDepartments.Select(x => new SelectListItem { Text = x.SubDepartmentId.ToString() + x.Description, Value = x.SubDepartmentId.ToString() }))
            @Html.ValidationMessageFor(model => model.Phone.SubDepartment)
        </div>

        <div class="form-group">
            <input type="submit" value="Edit" />
        </div>
    }

    @using (Html.BeginForm("Index", "Product", FormMethod.Post, new { @class = "SearchForm" }))
    {
        <button class="btn own-btn-action" value="list"> <span class="glyphicon glyphicon-repeat" aria-hidden="true"></span>Cancel</button>
    }
}

@if (Model.IsAddLaptopFormAreaVisible)
{
    @using (Html.BeginForm("Index", "Product", FormMethod.Post, new { @class = "SearchForm" }))
    {
        <button class="btn own-btn-action" value="list"> <span class="glyphicon glyphicon-repeat" aria-hidden="true"></span>Reset</button>
    }
    <h1>Add New Laptop</h1>

        @using (Html.BeginForm("CreateLaptop", "Product", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.ValidationSummary()

            <div class="form-group">
                @Html.LabelFor(model => model.Laptop.Title)
                @Html.TextBoxFor(model => model.Laptop.Title, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Laptop.Title)
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Laptop.Price)
                @Html.TextBoxFor(model => model.Laptop.Price, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Laptop.Price)
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Laptop.Brand)
                @Html.TextBoxFor(model => model.Laptop.Brand, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Laptop.Brand)
            </div>
            <div class="form-group">

                @Html.LabelFor(model => model.Laptop.LaptopModel)
                @Html.TextBoxFor(model => model.Laptop.LaptopModel, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Laptop.LaptopModel)
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Laptop.HardDriveSize)
                @Html.TextBoxFor(model => model.Laptop.HardDriveSize, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Laptop.HardDriveSize)
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Laptop.AvgCustomerReview)
                @Html.TextBoxFor(model => model.Laptop.AvgCustomerReview, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Laptop.AvgCustomerReview)
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Laptop.Quantity)
                @Html.TextBoxFor(model => model.Laptop.Quantity, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Laptop.Quantity)
            </div>



            <div class="form-group">
                @Html.LabelFor(model => model.Laptop.HardDrive)
                @Html.DropDownListFor(model => model.Laptop.HardDrive, Html.GetEnumSelectList(typeof(HardDriveType)))
                @Html.ValidationMessageFor(model => model.Laptop.HardDrive)
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Laptop.Processor)
                @Html.DropDownListFor(model => model.Laptop.Processor, Html.GetEnumSelectList(typeof(ProcessorType)))
                @Html.ValidationMessageFor(model => model.Laptop.Processor)
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Laptop.Condition)
                @Html.DropDownListFor(model => model.Laptop.Condition, Html.GetEnumSelectList(typeof(ConditionType)))
                @Html.ValidationMessageFor(model => model.Laptop.Condition)
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Laptop.SubDepartment)
                @Html.DropDownListFor(model => model.Laptop.SubDepartmentId, Model.SubDepartments.Select(x => new SelectListItem { Text = x.SubDepartmentId.ToString() + x.Description, Value = x.SubDepartmentId.ToString() }))
                @Html.ValidationMessageFor(model => model.Laptop.SubDepartment)
            </div>

            <div class="form-group">
                <input type="submit" value="Add New Laptop" />
            </div>
        }

}


@if (Model.IsEditLaptopFormAreaVisible)
{
    @using (Html.BeginForm("Index", "Product", FormMethod.Post, new { @class = "SearchForm" }))
    {
        <button class="btn own-btn-action" value="list"> <span class="glyphicon glyphicon-repeat" aria-hidden="true"></span>Reset</button>
    }
    <h1>Edit Laptop</h1>

    @using (Html.BeginForm("EditLaptop", "Product", FormMethod.Post, new { ProductId = Model.Laptop.ProductId }))
    {
        @Html.ValidationSummary()

        <div class="form-group">
            @Html.LabelFor(model => model.Laptop.Title)
            @Html.TextBoxFor(model => model.Laptop.Title, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Laptop.Title)
        </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Laptop.Price)
                @Html.TextBoxFor(model => model.Laptop.Price, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Laptop.Price)
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Laptop.Brand)
                @Html.TextBoxFor(model => model.Laptop.Brand, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Laptop.Brand)
            </div>
            <div class="form-group">

                @Html.LabelFor(model => model.Laptop.LaptopModel)
                @Html.TextBoxFor(model => model.Laptop.LaptopModel, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Laptop.LaptopModel)
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Laptop.HardDriveSize)
                @Html.TextBoxFor(model => model.Laptop.HardDriveSize, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Laptop.HardDriveSize)
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Laptop.AvgCustomerReview)
                @Html.TextBoxFor(model => model.Laptop.AvgCustomerReview, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Laptop.AvgCustomerReview)
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Laptop.Quantity)
                @Html.TextBoxFor(model => model.Laptop.Quantity, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Laptop.Quantity)
            </div>



            <div class="form-group">
                @Html.LabelFor(model => model.Laptop.HardDrive)
                @Html.DropDownListFor(model => model.Laptop.HardDrive, Html.GetEnumSelectList(typeof(HardDriveType)))
                @Html.ValidationMessageFor(model => model.Laptop.HardDrive)
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Laptop.Processor)
                @Html.DropDownListFor(model => model.Laptop.Processor, Html.GetEnumSelectList(typeof(ProcessorType)))
                @Html.ValidationMessageFor(model => model.Laptop.Processor)
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Laptop.Condition)
                @Html.DropDownListFor(model => model.Laptop.Condition, Html.GetEnumSelectList(typeof(ConditionType)))
                @Html.ValidationMessageFor(model => model.Laptop.Condition)
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Laptop.SubDepartment)
                @Html.DropDownListFor(model => model.Laptop.SubDepartmentId, Model.SubDepartments.Select(x => new SelectListItem { Text = x.SubDepartmentId.ToString() + x.Description, Value = x.SubDepartmentId.ToString() }))
                @Html.ValidationMessageFor(model => model.Laptop.SubDepartment)
            </div>

            <div class="form-group">
                <input type="submit" value="Add New Laptop" />
            </div>
    }
}
@Html.ActionLink("Create New Laptop", "CreateLaptop", "Product")
@Html.ActionLink("Create New Phone", "CreatePhone", "Product")

@section ownScript
{
<script>
    $(document).ready(function () {
        $(".own-btn-action").click(function (e) {
            e.preventDefault();

            console.log("eventCommand" + $("#EventCommand").val());
            console.log("button value" + $(this).val());
            $(this).css("color", "red");
            $("#EventCommand").val($(this).val());
            console.log("eventCommand" + $("#EventCommand").val());
            $("form.SearchForm").submit();

        });
    });

</script>    
}